#!/bin/bash

# Hangman
# By Duncan Verbrugge and Stef de Goey
# Assessment Operating Systems 1
# 15-03-2017

#
# Functions
#

function printWord() {
    local c="$gues"
    local pos=()
    local i
    local ans=$(echo $word | tr '[:upper:]' '[:lower:]')

    echo $word
    # figure out positions of letter in the answer
    for (( i = 0; i < ${#word}; i++ )); do
        if [ "${ans:$i:1}" = "$c" ]; then
            pos+=($i)
        fi
    done

    # keep track of what the user has entered so far
    letters+=($c)
    echo "${letters[*]}"

    # check for incorrect attempt
    if [[ "${#pos}" = 0 ]]; then
        let num_attempts-=1
        return
    fi

    # translate positions to question positions and replace blanks with the letter
    local start
    local end
    local p
    

    for (( i = 0; i < ${#pos[@]}; i++ )); do
        #p=${pos[$i]}
        #c=${word:$p:1}
        #p=$(($p+1))
        #question=$(echo $question | sed s/_/"$c"/$p)

        p=${pos[$i]}
        c=${word:$p:1}
        start=$(( ${pos[$i]}))
        end=$(( start + 1 ))

        # better way to do string manipulation?
        question="${question:0:$start}$c ${question:end}"
    done
}

function printWrongGuesses() {
  #statements
    echo "printWrongGuesses";
}

function printGallow() {
  wrongGuesses=$1
  case $wrongGuesses in
    0)
      echo "     ";
      echo "     ";
      echo "     ";
      echo "     ";
      echo "     ";
      echo "|____";
      ;;
    1)
      echo "     ";
      echo "|    ";
      echo "|    ";
      echo "|    ";
      echo "|    ";
      echo "|____";
      ;;
    2)
      echo "____ ";
      echo "|    ";
      echo "|    ";
      echo "|    ";
      echo "|    ";
      echo "|____";
      ;;
    3)
      echo "____ ";
      echo "|/   ";
      echo "|    ";
      echo "|    ";
      echo "|    ";
      echo "|____";
      ;;
    4)
      echo "____ ";
      echo "|/ | ";
      echo "|    ";
      echo "|    ";
      echo "|    ";
      echo "|____";
      ;;
    5)
      echo "____ ";
      echo "|/ | ";
      echo "|  O ";
      echo "|    ";
      echo "|    ";
      echo "|____";
      ;;
    6)
      echo "____ ";
      echo "|/ | ";
      echo "|  O ";
      echo "|  | ";
      echo "|    ";
      echo "|____";
      ;;
    7)
      echo "____ ";
      echo "|/ | ";
      echo "|  O ";
      echo "| /| ";
      echo "|    ";
      echo "|____";
      ;;
    8)
      echo "____ ";
      echo "|/ | ";
      echo "|  O ";
      echo "| /|\\";
      echo "|    ";
      echo "|____";
      ;;
    9)
      echo "____ ";
      echo "|/ | ";
      echo "|  O ";
      echo "| /|\\";
      echo "| /  ";
      echo "|____";
      ;;
    10)
      echo "____ ";
      echo "|/ | ";
      echo "|  O ";
      echo "| /|\\";
      echo "| / \\";
      echo "|____";
      ;;
  esac
}

function handleInput() {
  #statements
    echo "handleInput";
    read -n 1 gues
}

function getRandomWord() {
  if [[ -z $dictonary ]]; then
    word=$(head -$((${RANDOM} % `wc -l < words.txt` + 1)) words.txt | tail -1)
  else
    word=$(head -$((${RANDOM} % `wc -l < $dictonary` + 1)) $dictonary | tail -1)
  fi
  for (( i=0; i<${#word}; i++ )); do
  question+="_ "
  done
  echo $question
}

#
# Main program.
#

while  getopts ":w:d:" option; do
  case "${option}" in
    w)
      word=${OPTARG}
      ;;
    d)
      dictonary=${OPTARG}
      ;;
  esac
done

if [[ -z $word ]]; then
  getRandomWord
fi

gameover=false;
wrongGuesses=0;

printf "\ec"
printf "Welkom bij Galgje. \n \n";
printf "Using dictonary: $dictonary\n"

while [[ !$gameover ]]; do
 
  echo $question
  printWord
  printWrongGuesses
  printGallow $wrongGuesses
  handleInput
  printf "\ec"
done
